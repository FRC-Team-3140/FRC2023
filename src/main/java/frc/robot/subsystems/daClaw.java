// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class daClaw extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax leftShoulder;
private CANSparkMax rightShoulder;
private MotorControllerGroup shoulderMotorGroup;
private CANSparkMax wristMotor;
private Compressor mainCompressor;
private DoubleSolenoid gripper;
private DoubleSolenoid middleFinger;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public daClaw() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftShoulder = new CANSparkMax(20, MotorType.kBrushless);
 
 leftShoulder.restoreFactoryDefaults();  
leftShoulder.setInverted(false);
leftShoulder.setIdleMode(IdleMode.kCoast);
leftShoulder.burnFlash();
  

rightShoulder = new CANSparkMax(21, MotorType.kBrushless);
 
 rightShoulder.restoreFactoryDefaults();  
rightShoulder.setInverted(false);
rightShoulder.setIdleMode(IdleMode.kCoast);
rightShoulder.burnFlash();
  

shoulderMotorGroup = new MotorControllerGroup(leftShoulder, rightShoulder  );
 addChild("ShoulderMotorGroup",shoulderMotorGroup);
 

wristMotor = new CANSparkMax(22, MotorType.kBrushless);
 
 wristMotor.restoreFactoryDefaults();  
wristMotor.setInverted(false);
wristMotor.setIdleMode(IdleMode.kCoast);
wristMotor.burnFlash();
  

mainCompressor = new Compressor(0, PneumaticsModuleType.CTREPCM);
 addChild("mainCompressor",mainCompressor);
 

gripper = new DoubleSolenoid(0, PneumaticsModuleType.CTREPCM, 0, 1);
 addChild("gripper", gripper);
 

middleFinger = new DoubleSolenoid(0, PneumaticsModuleType.CTREPCM, 2, 3);
 addChild("middleFinger", middleFinger);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
