// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.sensors.CANCoder;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax frontLeftDriveMotor;
private CANSparkMax frontLeftTurnMotor;
private CANSparkMax frontRightDriveMotor;
private CANSparkMax frontRightTurnMotor;
private CANSparkMax backLeftDriveMotor;
private CANSparkMax backLeftTurnMotor;
private CANSparkMax backRightDriveMotor;
private CANSparkMax backRightTurnMotor;
private CANCoder frontLeftEncoder;
private CANCoder frontRightEncoder;
private CANCoder backLeftEncoder;
private CANCoder backRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
frontLeftDriveMotor = new CANSparkMax(1, MotorType.kBrushless);
 
 frontLeftDriveMotor.restoreFactoryDefaults();  
frontLeftDriveMotor.setInverted(false);
frontLeftDriveMotor.setIdleMode(IdleMode.kCoast);
frontLeftDriveMotor.burnFlash();
  

frontLeftTurnMotor = new CANSparkMax(2, MotorType.kBrushless);
 
 frontLeftTurnMotor.restoreFactoryDefaults();  
frontLeftTurnMotor.setInverted(false);
frontLeftTurnMotor.setIdleMode(IdleMode.kCoast);
frontLeftTurnMotor.burnFlash();
  

frontRightDriveMotor = new CANSparkMax(3, MotorType.kBrushless);
 
 frontRightDriveMotor.restoreFactoryDefaults();  
frontRightDriveMotor.setInverted(false);
frontRightDriveMotor.setIdleMode(IdleMode.kCoast);
frontRightDriveMotor.burnFlash();
  

frontRightTurnMotor = new CANSparkMax(4, MotorType.kBrushless);
 
 frontRightTurnMotor.restoreFactoryDefaults();  
frontRightTurnMotor.setInverted(false);
frontRightTurnMotor.setIdleMode(IdleMode.kCoast);
frontRightTurnMotor.burnFlash();
  

backLeftDriveMotor = new CANSparkMax(5, MotorType.kBrushless);
 
 backLeftDriveMotor.restoreFactoryDefaults();  
backLeftDriveMotor.setInverted(false);
backLeftDriveMotor.setIdleMode(IdleMode.kCoast);
backLeftDriveMotor.burnFlash();
  

backLeftTurnMotor = new CANSparkMax(6, MotorType.kBrushless);
 
 backLeftTurnMotor.restoreFactoryDefaults();  
backLeftTurnMotor.setInverted(false);
backLeftTurnMotor.setIdleMode(IdleMode.kCoast);
backLeftTurnMotor.burnFlash();
  

backRightDriveMotor = new CANSparkMax(7, MotorType.kBrushless);
 
 backRightDriveMotor.restoreFactoryDefaults();  
backRightDriveMotor.setInverted(false);
backRightDriveMotor.setIdleMode(IdleMode.kCoast);
backRightDriveMotor.burnFlash();
  

backRightTurnMotor = new CANSparkMax(8, MotorType.kBrushless);
 
 backRightTurnMotor.restoreFactoryDefaults();  
backRightTurnMotor.setInverted(false);
backRightTurnMotor.setIdleMode(IdleMode.kCoast);
backRightTurnMotor.burnFlash();
  

frontLeftEncoder = new CANCoder(10);
 
 

frontRightEncoder = new CANCoder(11);
 
 

backLeftEncoder = new CANCoder(12);
 
 

backRightEncoder = new CANCoder(13);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
